<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BI on My New Hugo Site</title>
    <link>http://d1mo3mx8wgjhk2.cloudfront.net/bi/</link>
    <description>Recent content in BI on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Sep 2019 10:27:36 +0800</lastBuildDate>
    
	<atom:link href="http://d1mo3mx8wgjhk2.cloudfront.net/bi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从Aurora迁移到Redshift并利用Quicksight做数据可视化分析</title>
      <link>http://d1mo3mx8wgjhk2.cloudfront.net/bi/aurora_redshift_quicksight/</link>
      <pubDate>Mon, 09 Sep 2019 10:27:36 +0800</pubDate>
      
      <guid>http://d1mo3mx8wgjhk2.cloudfront.net/bi/aurora_redshift_quicksight/</guid>
      <description>实验介绍 利用terraform模板启动DMS任务
架构图 实验前提  确保您的本机已经安装 Terraform （https://www.terraform.io/） 提前创建好EC2的秘钥对 事先用AWSCLI，aws configure配置好了凭证以有权启动这些资源  步骤 步骤1： 替换terraform变量 替换variable.tf里面的参数, 包括：VPC，DB subnet,EC2 subnet，EC2 key pair, region &amp;amp; 相应地区的AMI ID。
补充说明: 默认在us-west-2，因启动脚本用了yum install &amp;amp; wget等命令, 如果要换区域，请尽量添加Amazon Linux AMI确保这些命令可以正常运行
步骤2： 启动terrform模板
terraform init terraform apply  成功后会创建好以下相关资源 ,且bastion EC2已通过启动脚本(mysql_init.tpl)加载好了Aurora的实验数据。
记下这些output
Outputs Example: Aurora database name = lab Aurora endpoint = tf-xxxxxxx.us-west-2.rds.amazonaws.com Aurora master password = xxxx Aurora master username = root DMS Aurora Source ID = pdaxxx DMS RedShift Target ID = ehjxxxx DMS instanace name = vipxxxx EC2 Bastion Endpoint = RedShift Endpoint = xxxxxx.</description>
    </item>
    
  </channel>
</rss>